[{"title":"next/image はやっぱりすごかった - 機能紹介/パフォーマンス改善例/気をつけポイント","contentSnippet":"こんにちは、普段はある高専の情報科4年に通いながら、Wantedly, inc で長期インターンをしています。最近は技術的・ソフトウェア設計的な話をたくさんの人としたいなと強く思っているので是非 @igsr5_(Twitter) や @ichigo_dev(Zenn) あたりをフォローしてもらいです。（フォロー返します）先日、自身のポートフォリオサイトをリリースしました。https://igsr5.dev後からパフォーマンスチューニングの勉強をしたかったのであえて重たく実装したのですが、next/image を導入したところ想像以上にパフォーマンスが向上したのでブログにします。...","link":"https://zenn.dev/ichigo_dev/articles/17acf4ed7226400b2012","isoDate":"2022-03-07T15:44:54.000Z","dateMiliSeconds":1646667894000},{"title":"【assets-syncer】個人開発で使える最強の画像サーバを作りたい話","contentSnippet":"【assets-syncer】個人開発で使える最強の画像サーバを作りたい話個人的にいい感じの画像サーバを作ったのでブログとして書き留めておく。2022/03 追記) 今回は楽しくなって Ruby + Docker で実装したが、macOS なら fswatch を使ってファイル監視時の処理を作っていく方が多分良い。(gulp とか使うのもあり？) 作ったもの画像サーバ画像例 https://images.igsr5.com/l/sample.pngただの s3 + CloudFront 構成の静的ファイルサーバassets-syncerhttps://...","link":"https://zenn.dev/ichigo_dev/articles/b435fba30a73e23e78ad","isoDate":"2022-02-20T07:47:06.000Z","dateMiliSeconds":1645343226000},{"title":"OAuth2.0 / 認可コードフロー / トークン / OAuthにおけるCSRF / 疑問点","contentSnippet":"自分用ノート。（この記事の内容をみて勉強しない方がいいです） OAuth2.0とは複数のWebサービスを連携して動作させる仕組み。e.g.Googleログインできるサービス(notionとか)notionがコンシューマGoogleがサービスプロバイダ（リソースサーバ）にあたる 特徴従来のID、パスワード認証とは違ってトークンベースでの認証notionでGoogleログインするときにID, パスワード入力しないよね（ログイン中なら）コンシューマがサービスプロバイダ内のユーザデータを知る必要がない（当たり前だけどとても大切）上記のトークンにはサービスプロ...","link":"https://zenn.dev/ichigo_dev/articles/f2cab60eb3aa7d376e8d","isoDate":"2021-09-11T09:54:01.000Z","dateMiliSeconds":1631354041000},{"title":"Next.jsにおけるSPA的遷移の考え方","contentSnippet":"Next.jsにおけるSPA的遷移の考え方 追記(2021年09月21日): Linkタグを用いるとSSR時でもブラウザリロードすることなくコンポーネントを再レンダーすることができる。具体的には、サーバに対してGETリクエストを送り、getServerSidePropsを実行させた後をpropsを受け取り、再レンダーするような挙動になっている。これとNext.jsのLayoutシステムを用いれば、ヘッダをアンマウントさせずに画面遷移はできるが、ページ内部のモーダルなどはレイアウトにするのは厳しいので本記事で説明するshallowオプションを扱うのが良いと思われる。 背景...","link":"https://zenn.dev/ichigo_dev/articles/2b8c0b05cc6f74a5a507","isoDate":"2021-09-10T10:28:59.000Z","dateMiliSeconds":1631269739000},{"title":"Node.jsにおけるモジュールシステム","contentSnippet":"自分用ノート。（この記事の内容をみて勉強しない方がいいです） Node.jsにおけるモジュールシステムモジュールシステムとは外部ファイル（モジュール）を読み込むときの仕様である。Node.jsで使えるモジュールシステムとして、CJSとESMがある、現在はCJSがデフォルトになっている。拡張子が.cjsのものはCJS。拡張子が.mjsのものはECM。拡張子が.jsのファイルは、package.jsonのtypeフィールドの値によって判断される。具体的にはtypeがmoduleであれば.jsファイルがECMとして扱われる。commonjsにするとCJSとして扱われる。記述しな...","link":"https://zenn.dev/ichigo_dev/articles/540ebe464a6463674ea0","isoDate":"2021-08-26T02:23:05.000Z","dateMiliSeconds":1629944585000},{"title":"CORSとは CORS, 同一生成元ポリシー, 単純リクエスト, プリフライトリクエスト","contentSnippet":"自分用ノート。（この記事の内容をみて勉強しない方がいいです） CORS(Cross-Origin Resource Sharing)オリジン間リソース共有。 なぜ必要？同一生成元ポリシーと呼ばれるwebのセキュリティ対策があるため。具体的にはデフォルトでhttp通信においてリクエスト元とリクエスト先のオリジンが同じでない(ドメイン、ポート、プロトコル)とサーバのリソースにアクセス出来ないというもの。実際にはスクリプトのみに適用されている。(XMLHTTPRequestなど)これに対して異なるオリジンへのアクセスを許可する方法にCORSが存在する。例）https://...","link":"https://zenn.dev/ichigo_dev/articles/1544a9a189185f334869","isoDate":"2021-07-07T06:23:05.000Z","dateMiliSeconds":1625638985000},{"title":"Http Cookieの概要/作成/セキュリティについて","contentSnippet":"自分用ノート。（この記事の内容をみて勉強しない方がいいです） Http CookieとはHttp Cookieとはサーバがユーザーのウェブブラウザに送信する小さなデータ(テキストファイル)であり、ブラウザに保存されたあと、リクエスト時にヘッダに含める。一般的には二つのリクエストが同じブラウザから送信されたものであるかを知るために使用される。主な用途としては、セッション管理、ユーザ設定などの保存、トラッキングが挙げられる。以前はクライアント側の記憶領域に用いられたこともあったが、現在は上記の用途で利用される。これはCookieが全てのリクエストで送信されるため、記憶領域として...","link":"https://zenn.dev/ichigo_dev/articles/3142a47a2a860f8450e0","isoDate":"2021-07-04T11:37:20.000Z","dateMiliSeconds":1625398640000},{"title":"Webpackとは【Webpack + TypeScript + React で環境構築】","contentSnippet":"自分用ノート。（この記事の内容をみて勉強しない方がいいです） Webpackとは複数のモジュールを1つにまとめて出力できる。モジュールバンドラ。loderを用いることでjsファイル以外をまとめることができる。 利点JavaScriptモジュール間の依存関係を解決従来はhtml側からのJSファイルの読み込み順を自身で考えなければならなかった。WebpackではJSファイル間の依存関係を移動で解析して、まとめてくれる。Dependency Graph読み込み回数を減らせる1つのファイルにビルドしてから読み込むためコード変換Node.jsのみで使える記法などをブラ...","link":"https://zenn.dev/ichigo_dev/articles/d061205249e6db364c2a","isoDate":"2021-06-11T09:24:52.000Z","dateMiliSeconds":1623403492000},{"title":"OSI参照モデルとTCP/IPについて","contentSnippet":"自分用ノート。（この記事の内容をみて勉強しない方がいいです） プロトコル異なるコンピュータ同士がネットワークを通じて通信するための約束事のこと。 OSI参照モデルISO(国際標準化機構)が通信プロトコルの設計の指標として定めたもの。このモデルによって通信に必要な機能を階層化することで複雑な通信プロトコルを単純化できる。あくまでプロトコルやインターフェースの設計指標であるため、プロトコルを指定しているわけではない。層7アプリケーション層6プレゼンテーション層5セッション層4トランスポート層3ネットワーク層2データリ...","link":"https://zenn.dev/ichigo_dev/articles/cf199cba0b5ae3d031b0","isoDate":"2021-02-13T15:15:48.000Z","dateMiliSeconds":1613229348000},{"title":"【Rails】Active Recordでどんなクエリが発行されているのか見てみる。","contentSnippet":"自分用ノート。（この記事の内容をみて勉強しない方がいいです）メモリたいものが増えたら更新する。 allRailsUser.allSQLSELECT \"users\".* FROM \"users\" selectRailsUser.select(:name)SQLSELECT \"name\" FROM \"users\" LIMIT $1  [[\"LIMIT\", 11]] findRailsUser.find(1)SQLSELECT \"users\".* FROM \"users\" WHERE \"users\".\"id\" = $1 LIMIT $...","link":"https://zenn.dev/ichigo_dev/articles/06d2b7032e362cd793bb","isoDate":"2021-01-17T07:24:34.000Z","dateMiliSeconds":1610868274000}]
